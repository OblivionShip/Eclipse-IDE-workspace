package games.board;
import java.util.Scanner.*;
//** ln 8 through 49 resembles ln 5 through 17 on TicTacToeGame.java **//
public class BoardGameTester {
	// Create a 3x3 board for TicTacToe
	private static int[][] tttgameboard = new int[3][3];
		private static final int tttEMPTY = 0;
		private static final int tttNOUGHT = -1;
		private static final int tttCROSS = 1;
	// Create a 6x7 board for ConnectFour
	private static int[][] cfgameboard = new int[6][7];
			private static final int cfEMPTY = 0;
			private static final int cfYELLOW = -2;
			private static final int cfRED = 2;	
	// Create a 5x8 board for Mastermind
	private static int[][] mmgameboard = new int[5][8];
			private static final int mmEMPTY = 0;
			private static final int mmYELLOW = -3;
			private static final int mmRED = 3;
			private static final int mmGREEN = -4;
			private static final int mmBLUE = 4;
			private static final int mmMAGENTA = -5;
			private static final int mmORANGE = 5;
			
	/* Set board must be empty */
	static void set1(int val, int row, int col)
	throws IllegalArgumentException {
		if (tttgameboard[row][col] == tttEMPTY)
			tttgameboard[row][col] = val;
		else throw new IllegalArgumentException
			("Player already there!");
	}
	static void set2(int val1, int row1, int col1)	
	throws IllegalArgumentException {
		if (cfgameboard[row1][col1] == cfEMPTY)
			cfgameboard[row1][col1] = val1;
		else throw new IllegalArgumentException
			("Row is full!");
	}
	static void set3(int val2, int row2, int col2)
			throws IllegalArgumentException {
		if (mmgameboard[row2][col2] == tttEMPTY)
			mmgameboard[row2][col2] = val2;
		else throw new IllegalArgumentException
			("Peg is taken!");
	}
	//** ln 8 through 49 resembles ln 5 through 17 on TicTacToeGame.java **//
	public static void main (String [] args) {
		tttcreateBoard(3,3);
		mmcreateBoard(5,8);
		cfcreateBoard(6,7);
		int turn = 0;
		int Player;
		int Outcome;
		java.util.Scanner scan = new java.util.Scanner(System.in);
		do {
			tttdisplayBoard( );
			Player = (turn% 2 == 0)? tttNOUGHT : tttCROSS;
			if (Player == tttNOUGHT) 
				System.out.println ("\n—Player1's turn—");
			else System.out.println ("\n—Player2's turn—");
			System.out.print("TicTacToe, make a move P1:" );
			try {
				set1(Player, scan.nextInt(), scan.nextInt());
			} catch (Exception ex)
			{System.err.println(ex); turn--;}
			
			turn ++;
			Outcome = tttwinOrTie( );
		} while ( Outcome == -2);
		
		tttdisplayBoard();

		switch (Outcome) {
		case tttNOUGHT:
			System.out.println("Player1 wins in TicTacToe!");
			break;
		case tttCROSS:
			System.out.println("Player 2 wins in TicTacToe!");
			break;			
		case 0:
			System.out.println("Ties in TicTacToe.");
			break;
		}
		
		
		tttdisplayBoard( );
		cfdisplayBoard( );
		mmdisplayBoard( );
			Player = (turn%2 == 0)? cfYELLOW : cfRED;
			Player = (turn%2 == 0)? mmYELLOW : mmRED;
		if (Player == cfYELLOW)
		if (Player == mmYELLOW)	
		
		Outcome = cfwinOrTie( );
		Outcome = mmwinOrTie( );

	public static void main2(String[] args) {
		mmcreateBoard(5,8);
		int turn1 = 0;
		int Player1;
		int Outcome1;
		java.util.Scanner scan1 = new java.util.Scanner(System.in);
		do {
			cfdisplayBoard( );
			Player1 = (turn1%2 == 0)? cfYELLOW : cfRED;
			if (Player1 == cfYELLOW)
				System.out.println ("\n—Player1's turn—");
			else System.out.println ("\n—Player2's turn—");
			System.out.print("ConnectFour, make a move P1:" );
			try  {
				set2(Player1, scan1.nextInt(), scan1.nextInt());
			} catch (Exception ex)
			{System.err.println(ex); turn1--;}
			
			turn1 ++;
			Outcome1 = cfwinOrTie( );
		} while ( Outcome1 == -2);
		
		cfdisplayBoard();
		
		switch (Outcome1) {
		case cfYELLOW:
			System.out.println("Player1 wins in ConnectFour!");
			
			break;
		case cfRED:
			System.out.println("Player 2 wins in ConnectFour!");
			
			break;
		case 0:
			System.out.println("Tie in ConnectFour.");
			
			break;
		}
	}
		
			tttdisplayBoard( );
			cfdisplayBoard( );
			mmdisplayBoard( );
			Player1 = (turn1%2 == 0)? cfYELLOW : cfRED;
			Player1 = (turn1%2 == 0)? mmYELLOW : mmRED;
			if (Player1 == cfYELLOW)
			if (Player1 == mmYELLOW)	
			
			Outcome1 = cfwinOrTie( );
			Outcome1 = mmwinOrTie( );
		
		switch (Outcome1) {
		case cfYELLOW:
			System.out.print("Player1 wins in ConnectFour!");
			break;
		case cfRED:
			System.out.print("Player2 wins in ConnectFour!");
			break;
		case mmYELLOW:
			System.out.print("Player1 wins in Mastermind!");
			break;
		case mmRED:
			System.out.print("Player2 wins in Mastermind!");
			break;
		}
	}

	//** NEXT GAME **//
	//** NEXT GAME **//
	//** NEXT GAME **//
	//** NEXT GAME **//
	//** NEXT GAME **//
	//** NEXT GAME **//
			
			private static void main3(String [] args) {
				mmcreateBoard(5,8);
				int turn = 0;
				int Player;
				int Outcome;
				java.util.Scanner scan = new java.util.Scanner(System.in);
				do {
					mmdisplayBoard( );
					Player = (turn%2 == 0)? mmYELLOW : mmRED;
					if (Player == mmYELLOW)
						System.out.println ("\n—Player1's turn—");
					else System.out.println ("\n—Player2's turn—");
					System.out.print("Make a move, player1:" );
					try  {
						set1(Player, scan.nextInt(), scan.nextInt());
					} catch (Exception ex)
					{System.err.println(ex); turn--;}
					
					turn ++;
					Outcome = mmwinOrTie( );
				} while ( Outcome == -2);
				
				mmdisplayBoard();
				
				switch (Outcome) {
				case mmYELLOW:
					System.out.println("Player1 wins!");
					break;
				case mmRED:
					System.out.println("Player 2 wins!");
					break;
				case 0:
					System.out.println("Tie.");
					break;
					}
				}
	

	
	/*display the Tic Tac Toe board*/
	static void tttdisplayBoard() {
		System.out.print("TicTacToe:");
		System.out.println();
		for(int r=0; r < tttgameboard.length; r++) {
			System.out.print("|");
			for (int c=0; c < tttgameboard[r].length; c++)
			{
				switch(tttgameboard[r][c]) {
				case tttNOUGHT:
					System.out.print("O");
				break;
				case tttCROSS:
					System.out.print("X");
				break;
				default: //Empty
					System.out.print(" ");
				}
					System.out.print("|");
			}
			System.out.println("\n-------");
		}
	}
	/*display the Connect Four board*/
	static void cfdisplayBoard() {
		System.out.print("ConnectFour:");
		System.out.println();
		for(int r=0; r < cfgameboard.length; r++) {
			System.out.print("|");
			for(int c=0; c < cfgameboard.length; c++)
			{
				switch(cfgameboard[r][c]) {
				case cfYELLOW:
					System.out.print("Y!");
				break;
				case cfRED:
					System.out.print("R!");
				break;
				default: //Empty
					System.out.print(" ");
				}
					System.out.print("|");
			}
			System.out.println("\n           ");
		}
	}
	/* display the Mastermind board */
	static void mmdisplayBoard() {
		System.out.print("Mastermind:");
		System.out.println();
		for(int r=0; r < mmgameboard.length; r++) {
			System.out.print("|");
			for (int c=0; c < mmgameboard[r].length; c++)
			{
				switch(mmgameboard[r][c]) {
				case mmYELLOW:
					System.out.print("Y!!");
				break;
				case mmRED:
					System.out.print("R!!");
				break;
				default: //Empty
					System.out.print(" ");
				}
					System.out.print("|");
			}
			System.out.println("\n------------------");
		}
	}
	/* createBoard */
	private static void tttcreateBoard(int i, int j) {
		//TODO Initialize the tttgameboard
	}
	private static void cfcreateBoard(int i, int j) {
		//TODO Initialize the cfgameboard
	}
	private static void mmcreateBoard(int i, int j) {
		//TODO Initialize the mmgameboard
	}
	private static int mmwinOrTie() {
		//TODO Determine whether X or O won or there is a tie
		if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[0][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		if (tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[1][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[2][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		
		if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[2][0] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		if (tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[2][1] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		if (tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[2][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		if (tttgameboard[0][0] + tttgameboard[1][1] + tttgameboard[2][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		if (tttgameboard[0][2] + tttgameboard[1][1] + tttgameboard[2][0] == 3*tttNOUGHT)
			{return tttNOUGHT;}
		
		if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[0][2] == 3*tttCROSS)
			{return tttCROSS;}
		if (tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[1][2] == 3*tttCROSS)
			{return tttCROSS;}
		if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[2][2] == 3*tttCROSS)
			{return tttCROSS;}
		
		if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[2][0] == 3*tttCROSS)
			{return tttCROSS;}
		if (tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[2][1] == 3*tttCROSS)
			{return tttCROSS;}
		if (tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[2][2] == 3*tttCROSS)
			{return tttCROSS;}
		if (tttgameboard[0][0] + tttgameboard[1][1] + tttgameboard[2][2] == 3*tttCROSS)
			{return tttCROSS;}
		if (tttgameboard[0][2] + tttgameboard[1][1] + tttgameboard[2][0] == 3*tttCROSS)
			{return tttCROSS;}
		
		if (tttgameboard[2][2] + tttgameboard[1][2] + tttgameboard[1][1] + tttgameboard[0][1]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return -2;}
		if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[2][1] 
				+  tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[1][1] + tttgameboard[2][1]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[1][1] + tttgameboard[1][2]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[1][2]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[0][1]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[1][0]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][2] + tttgameboard[2][1] + tttgameboard[1][1] + tttgameboard[1][0]
				+ tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
		if(tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[1][2] + tttgameboard[2][1]
				+  tttgameboard[1][0] == 5*tttNOUGHT)
			{return 0;}
		if(tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[0][1] + tttgameboard[2][1]
				+  tttgameboard[1][2] == 5*tttNOUGHT)
			{return 0;}
		if(tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][1] + tttgameboard[0][1]
				+  tttgameboard[1][2] == 5*tttNOUGHT)
			{return 0;}
		if(tttgameboard[2][2] + tttgameboard[1][2] + tttgameboard[2][1] + tttgameboard[0][1]
				+  tttgameboard[1][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[1][2] + tttgameboard[1][0]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[2][1] + tttgameboard[2][0]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[1][0] + tttgameboard[2][1]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[1][0] + tttgameboard[1][2]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][2] + tttgameboard[2][1] + tttgameboard[1][2] + tttgameboard[1][0]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][2] + tttgameboard[2][1] + tttgameboard[1][2] + tttgameboard[0][1]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[1][0] + tttgameboard[0][1]
				+ tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[1][0] + tttgameboard[1][2]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][1] + tttgameboard[0][2]
				+ tttgameboard[0][1] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][1] + tttgameboard[1][2]
				+ tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][0] + tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[2][0]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][2] + tttgameboard[0][1] + tttgameboard[0][2] + tttgameboard[1][0]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][2] + tttgameboard[1][0] + tttgameboard[0][0] + tttgameboard[2][2]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[2][2] + tttgameboard[1][2] + tttgameboard[0][0]
				+ tttgameboard[0][1] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[2][0] + tttgameboard[2][1]
				+ tttgameboard[1][2] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][2] + tttgameboard[1][2]
				+ tttgameboard[0][1] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][1] + tttgameboard[0][2] + tttgameboard[2][1] + tttgameboard[2][2]
				+ tttgameboard[1][0] == 5*tttNOUGHT)
			{return 0;}
		if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[0][2] + tttgameboard[1][2]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}

		return -2;
	}
	private static int cfwinOrTie() {
		// TODO Auto-generated method stub
		return 0;
	}
	private static int tttwinOrTie() {
		// TODO Auto-generated method stub
		return 0;
	}
}