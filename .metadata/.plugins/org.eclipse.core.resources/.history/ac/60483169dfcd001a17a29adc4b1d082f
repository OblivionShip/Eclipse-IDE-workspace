package games.board;
import games.board.*;
import javafx.application.Application.*;
import games.board.Board;
import games.board.Cell;
import games.board.Player;
import games.board.Mark;

public class BoardGameTester {
	static int[][] tttgameboard = new int [3][3];
		static final int tttEMPTY = 0;
		static final int tttNOUGHT = -1;
		static final int tttCROSS = 1;

	static int[][] cfgameboard = new int [6][7];
		static final int cfEMPTY = 0;
		static final int cfYELLOW = -2;
		static final int cfRED = 2;
	
	static int[][] mmgameboard = new int [5][8];
		static final int mmEMPTY = 0;
		static final int mmYELLOW = -3;
		static final int mmRED = 3;
		static final int mmGREEN = -4;
		static final int mmBLUE = 4;
		static final int mmMAGENTA = -5;
		static final int mmORANGE = 5;
	
	public static void main (String [] args) {
		tttcreateBoard(3,3);
		int turn = 0;
		int Player;
		int outcome;
		java.util.Scanner scan = new java.util.Scanner(System.in);
		do {
			tttdisplayBoard( );
			Player = (turn %2 == 0)? tttNOUGHT : tttCROSS;
			if (Player == tttNOUGHT)
				System.out.println("\n—O's turn—");
			else System.out.println("\n—X's turn—");
			System.out.print("Enter row and column:" );
				try {
					set(Player, scan.nextInt(), scan.nextInt());
				} catch (Exception ex)
				{System.err.println(ex); turn--;}
				
				turn ++;
				outcome = tttwinOrTie( );
			} while (outcome == -2);
			
			tttdisplayBoard();
			
			switch (outcome) {
			case tttNOUGHT:
				System.out.println("O wins!");
				break;
			case tttCROSS:
				System.out.println("X wins!");
				break;
			case 0:
				System.out.println("Tie.");
				break;
			}
}
/* Set a square on the board must be empty */
static void set(int val, int row, int col)
throws IllegalArgumentException {
	if (tttgameboard[row][col] == tttEMPTY)
		tttgameboard[row][col] = val;
	else throw new IllegalArgumentException
		("Player already there!");
}
/* display the board */
static void tttdisplayBoard() {
	for(int r=0; r < tttgameboard.length; r++) {
		System.out.print("|");
		for(int c=0; c < tttgameboard[r].length; c++)
		{
			switch(tttgameboard[r][c]) {
			case tttNOUGHT:
				System.out.print("O");
			break;
			case tttCROSS:
				System.out.print("X");
			break;
			default: //Empty
				System.out.print(" ");
			}
				System.out.print("|");
		}
		System.out.println("\n-------");
	}
}
public static void tttcreateBoard(int rows, int cols) {
	//TODO Initialize the Tic Tac Toe gameboard
	int r, c;
	int tttcreateBoard [][] = new int [3][3];
	
	for (r=0; r < 3; ++r) {
		for (c=0; c < 3; ++c) {
			tttcreateBoard[r][c]=(r*1)+(c*1);
			System.out.print(tttcreateBoard[r][c] + " ");
		}
		System.out.println();
	}
}

static int tttwinOrTie() {
	//TODO Determine whether X or O won or there is a tie in Tic Tac Toe 
			if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[0][2] == 3*tttNOUGHT)
				{return tttNOUGHT;}
			if (tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[1][2] == 3*tttNOUGHT)
				{return tttNOUGHT;}
			if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[2][2] == 3*tttNOUGHT)
				{return tttNOUGHT;}
			
			if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[2][0] == 3*tttNOUGHT)
			{return tttNOUGHT;}
			if (tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[2][1] == 3*tttNOUGHT)
			{return tttNOUGHT;}
			if (tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[2][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
			if (tttgameboard[0][0] + tttgameboard[1][1] + tttgameboard[2][2] == 3*tttNOUGHT)
			{return tttNOUGHT;}
			if (tttgameboard[0][2] + tttgameboard[1][1] + tttgameboard[2][0] == 3*tttNOUGHT)
			{return tttNOUGHT;}
			
			if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[0][2] == 3*tttCROSS)
			{return tttCROSS;}
			if (tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[1][2] == 3*tttCROSS)
			{return tttCROSS;}
			if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[2][2] == 3*tttCROSS)
			{return tttCROSS;}
			
			if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[2][0] == 3*tttCROSS)
			{return tttCROSS;}
			if (tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[2][1] == 3*tttCROSS)
			{return tttCROSS;}
			if (tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[2][2] == 3*tttCROSS)
			{return tttCROSS;}
			if (tttgameboard[0][0] + tttgameboard[1][1] + tttgameboard[2][2] == 3*tttCROSS)
			{return tttCROSS;}
			if (tttgameboard[0][2] + tttgameboard[1][1] + tttgameboard[2][0] == 3*tttCROSS)
			{return tttCROSS;}
			
			if (tttgameboard[2][2] + tttgameboard[1][2] + tttgameboard[1][1] + tttgameboard[0][1]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[2][1] 
				+  tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[1][1] + tttgameboard[2][1]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[1][1] + tttgameboard[1][2]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[1][2]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[1][1] + tttgameboard[0][1]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[1][1] + tttgameboard[1][0]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][2] + tttgameboard[2][1] + tttgameboard[1][1] + tttgameboard[1][0]
				+ tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
			if(tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[1][2] + tttgameboard[2][1]
				+  tttgameboard[1][0] == 5*tttNOUGHT)
			{return 0;}
			if(tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[0][1] + tttgameboard[2][1]
				+  tttgameboard[1][2] == 5*tttNOUGHT)
			{return 0;}
			if(tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][1] + tttgameboard[0][1]
				+  tttgameboard[1][2] == 5*tttNOUGHT)
			{return 0;}
			if(tttgameboard[2][2] + tttgameboard[1][2] + tttgameboard[2][1] + tttgameboard[0][1]
				+  tttgameboard[1][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[1][2] + tttgameboard[1][0]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][2] + tttgameboard[0][1] + tttgameboard[2][1] + tttgameboard[2][0]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[1][0] + tttgameboard[2][1]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[1][0] + tttgameboard[1][2]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][2] + tttgameboard[2][1] + tttgameboard[1][2] + tttgameboard[1][0]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][2] + tttgameboard[2][1] + tttgameboard[1][2] + tttgameboard[0][1]
				+ tttgameboard[0][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[1][0] + tttgameboard[0][1]
				+ tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[2][1] + tttgameboard[1][0] + tttgameboard[1][2]
				+ tttgameboard[2][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][1] + tttgameboard[0][2]
				+ tttgameboard[0][1] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][1] + tttgameboard[1][2]
				+ tttgameboard[0][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[0][2] + tttgameboard[1][2] + tttgameboard[2][0]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][2] + tttgameboard[0][1] + tttgameboard[0][2] + tttgameboard[1][0]
				+ tttgameboard[2][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][2] + tttgameboard[1][0] + tttgameboard[0][0] + tttgameboard[2][2]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[2][2] + tttgameboard[1][2] + tttgameboard[0][0]
				+ tttgameboard[0][1] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[0][1] + tttgameboard[2][0] + tttgameboard[2][1]
				+ tttgameboard[1][2] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[2][0] + tttgameboard[1][0] + tttgameboard[2][2] + tttgameboard[1][2]
				+ tttgameboard[0][1] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][1] + tttgameboard[0][2] + tttgameboard[2][1] + tttgameboard[2][2]
				+ tttgameboard[1][0] == 5*tttNOUGHT)
			{return 0;}
			if (tttgameboard[0][0] + tttgameboard[1][0] + tttgameboard[0][2] + tttgameboard[1][2]
				+ tttgameboard[2][1] == 5*tttNOUGHT)
			{return 0;}

return -2;
		}
		
	}
