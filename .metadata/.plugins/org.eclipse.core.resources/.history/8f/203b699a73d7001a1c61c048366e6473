package ConnectFourTrial1;
import java.util.Scanner;

class ConnectFourTrial1 {

	    //global variables
	    final static int WIDTH = 6;
	    final static int HEIGHT = 6;
	    final static int BRTTRM_RRW = WIDTH - 1;

	    //game board
	    static char[][] board = new char[WIDTH][HEIGHT];

	    //creates scanner
	    static Scanner scanner = new Scanner(System.in);

	    public static void main(String[] args){
	        //creates board
	        CreateBoard();

	        //tells player how to play
	        System.out.println("Use 0-5 to choose what column you want");

	        //displays board
	        PrintBoard();

	        //creates boolean to determine status of game
	        boolean flag = true;

	        //main game loop
	        while(flag){
	            //activates player 1s turn, then prints board
	            DropY();
	            PrintBoard();

	            //determines if player 1 has won
	            if(!CheckY()){
	                flag = false; //sets flag to false so loop is not repeated if player 1 won
	                break; //break to skip player 2s turn if won
	            }

	            //activates player 2s turn, then prints board
	            DropR();
	            PrintBoard();

	            //determines if player 1 has won
	            if(!CheckR()){
	                flag = false; //sets flag to false so loop is not repeated if player 2 won
	                break; // break for consistency
	            }
	        }
	    }
	    public static void CreateBoard() {
	        //fills board with '.' for the width and height
	        for (int w = 0; WIDTH > w; w += 1) {
	            for (int h = 0; HEIGHT > h; h += 1) {
	                board[w][h] = '.';
	            }
	        }
	    }

	    public static void PrintBoard() {
	        //prints the board
	        for (int w = 0; WIDTH > w; w += 1) {
	            for (int h = 0; HEIGHT > h; h += 1) {
	                System.out.print(board[w][h]);
	            }
	            System.out.println();
	        }
	        System.out.println();
	    }

	    public static void DropY(){
	        //creates a counter
	        int counter = 1;

	        //shows whos turn
	        System.out.println("Player 1 turn");

	        //gets input
	        int column = scanner.nextInt();

	        while(true){
	            if(column > WIDTH){
	                System.out.println("That's not a valid column");
	                break;
	            }

	            if (board[BRTTRM_RRW][column] == '.') { //checks to see if space is blank, puts Y there if it is
	                board[BRTTRM_RRW][column] = 'Y';
	                break; //breaks loop after placing
	            }else if(board[BRTTRM_RRW][column] == 'Y' || board[BRTTRM_RRW][column] == 'R'){ //if space isn't blank, checks to see if one above is
	                if(board[BRTTRM_RRW - counter][column] == '.'){ //puts Y if blank
	                    board[BRTTRM_RRW - counter][column] = 'Y';
	                    break; //breaks loop after placing
	                }
	            }
	            counter += 1; //adds one to counter if the space wasn't blank, then loops again
	            if(counter == WIDTH){ //checks to see if at end of column
	                System.out.println("That column is full");
	                break;
	            }
	        }
	    }


	    public static void DropR(){
	        //creates a counter
	        int counter = 1;

	        //shows whos turn
	        System.out.println("Player 2 turn");

	        //gets input
	        int column = scanner.nextInt();

	        while(true){
	            if(column > WIDTH){
	                System.out.println("That's not a valid column");
	                break;
	            }

	            if (board[BRTTRM_RRW][column] == '.') { //checks to see if space is blank, puts R there if it is
	                board[BRTTRM_RRW][column] = 'R';
	                break; //breaks loop after placing
	            }else if(board[BRTTRM_RRW][column] == 'Y' || board[BRTTRM_RRW][column] == 'R'){ //if space isn't blank, checks to see if one above is
	                if(board[BRTTRM_RRW - counter][column] == '.'){ //puts R if blank
	                    board[BRTTRM_RRW - counter][column] = 'R';
	                    break; //breaks loop after placing
	                }
	            }
	            counter += 1; //adds one to counter if the space wasn't blank, then loops again
	            if(counter == WIDTH){ //checks to see if at end of column
	                System.out.println("That column is full");
	                break;
	            }
	        }
	    }

	    public static boolean CheckYHorizontal(){
	        //creates boolean to act as flag
	        boolean flag = true;

	        //creates counter
	        int counter = 0;
	        while(flag){

	            //goes through board horizontally
	            for(int w = 0; WIDTH > w; w += 1){
	                for(int h = 0; HEIGHT > h; h += 1){
	                    if(board[w][h] == 'Y'){ //if it finds an Y, add 1 to counter
	                        counter += 1;
	                    }else{
	                        counter = 0; // if next piece is not an Y, set counter to 0
	                    }
	                    if(counter >= 4){
	                        System.out.println("Player 1 wins"); //if counter is greater or equal to 4, player wins
	                        flag = false;
	                    }
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckYVertical(){
	        //creates boolean to act as flag
	        boolean flag = true;

	        //creates counter
	        int counter = 0;
	        while(flag){

	            //goes through board vertically
	            for(int h = 0; HEIGHT > h; h += 1){
	                for(int w = 0; WIDTH > w; w += 1){
	                    if(board[w][h] == 'Y'){ //if it finds an Y, add 1 to counter
	                        counter += 1;
	                    }else{
	                        counter = 0; // if next piece is not an Y, set counter to 0
	                    }
	                    if(counter >= 4){
	                        System.out.println("Player 1 wins"); //if counter is greater or equal to 4, player wins
	                        flag = false;
	                    }
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckRVertical(){
	        //creates boolean to act as flag
	        boolean flag = true;

	        //creates counter
	        int counter = 0;
	        while(flag){

	            //goes through board vertically
	            for(int h = 0; HEIGHT > h; h += 1){
	                for(int w = 0; WIDTH > w; w += 1){
	                    if(board[w][h] == 'R'){ //if it finds an R, add 1 to counter
	                        counter += 1;
	                    }else{
	                        counter = 0; // if next piece is not an R, set counter to 0
	                    }
	                    if(counter >= 4){
	                        System.out.println("Player 2 wins"); //if counter is greater or equal to 4, player wins
	                        flag = false;
	                    }
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckRHorizontal(){
	        //creates boolean to act as flag
	        boolean flag = true;

	        //creates counter
	        int counter = 0;
	        while(flag){

	            //goes through board vertically
	            for(int w = 0; WIDTH > w; w += 1){
	                for(int h = 0; HEIGHT > h; h += 1){
	                    if(board[w][h] == 'R'){ //if it finds an R, add 1 to counter
	                        counter += 1;
	                    }else{
	                        counter = 0; // if next piece is not an R, set counter to 0
	                    }
	                    if(counter >= 4){
	                        System.out.println("Player 2 wins"); //if counter is greater or equal to 4, player wins
	                        flag = false;
	                    }
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckYDiagonalForward(){
	        //flag
	        boolean flag = true;

	        //counter
	        int counter = 0;

	        //check boolean
	        Boolean check = false;

	        //checkers
	        int checkColumn = 1;
	        int checkRow = 1;

	        while(flag){ //goes through until an Y is found
	            for(int w = 0; WIDTH > w; w += 1){
	                for(int h = 0; HEIGHT > h; h += 1){
	                    if(board[w][h] == 'Y'){ //if Y is found, add one to counter and go into loop
	                        counter += 1;
	                        check = true;
	                        while(check){ //goes through diagonally looking for Ys
	                            if(checkColumn + w <= WIDTH - 1&& checkRow + h <= HEIGHT - 1){
	                                if(board[w + checkColumn][h + checkRow] == 'Y'){ //if Y is found, add 1 to counter
	                                    counter += 1;
	                                }
	                            }

	                            //adds 1 to checkers
	                            checkColumn += 1;
	                            checkRow += 1;

	                            if(checkColumn == WIDTH -1 || checkRow == HEIGHT -1){ //if outside of board, break
	                                check = false;
	                                break;
	                            }

	                            if(counter >= 4){
	                                System.out.println("Player 1 wins"); //if counter is greater or equal to 4, player wins
	                                check = false;
	                                flag = false;
	                                break;
	                            }
	                        }
	                    }
	                    if(counter >= 4){
	                        flag = false;
	                        break;
	                    }

	                    //resets counter and checkers
	                    counter = 0;
	                    checkColumn = 1;
	                    checkRow = 1;
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckRDiagonalForward(){
	        //flag
	        boolean flag = true;

	        //counter
	        int counter = 0;

	        //check boolean
	        Boolean check = false;

	        //checkers
	        int checkColumn = 1;
	        int checkRow = 1;

	        while(flag){ //goes through until an R is found
	            for(int w = 0; WIDTH > w; w += 1){
	                for(int h = 0; HEIGHT > h; h += 1){
	                    if(board[w][h] == 'R'){ //if R is found, add one to counter and go into loop
	                        counter += 1;
	                        check = true;
	                        while(check){ //goes through diagonally looking for Rs
	                            if(checkColumn + w <= WIDTH - 1&& checkRow + h <= HEIGHT - 1){
	                                if(board[w + checkColumn][h + checkRow] == 'R'){ //if R is found, add 1 to counter
	                                    counter += 1;
	                                }
	                            }

	                            //adds 1 to checkers
	                            checkColumn += 1;
	                            checkRow += 1;

	                            if(checkColumn == WIDTH -1 || checkRow == HEIGHT -1){ //if outside of board, break
	                                check = false;
	                                break;
	                            }

	                            if(counter >= 4){
	                                System.out.println("Player 2 wins"); //if counter is greater or equal to 4, player wins
	                                check = false;
	                                flag = false;
	                                break;
	                            }
	                        }
	                    }
	                    if(counter >= 4){
	                        flag = false;
	                        break;
	                    }

	                    //resets counter and checkers
	                    counter = 0;
	                    checkColumn = 1;
	                    checkRow = 1;
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckYDiagonalBack(){
	        //flag
	        boolean flag = true;

	        //counter
	        int counter = 0;

	        //check boolean
	        Boolean check = false;

	        //checkers
	        int checkColumn = 1;
	        int checkRow = 1;

	        while(flag){ //goes through until an Y is found
	            for(int w = 0; WIDTH > w; w += 1){
	                for(int h = 0; HEIGHT > h; h += 1){
	                    if(board[w][h] == 'Y'){ //if Y is found, add one to counter and go into loop
	                        counter += 1;
	                        check = true;
	                        while(check){ //goes through diagonally looking for Ys
	                            if(w - checkColumn >= 0 && h - checkRow >= 0){
	                                if(board[w - checkColumn][h - checkRow] == 'Y'){
	                                    counter += 1; //if Y is found, add 1 to counter
	                                }
	                            }

	                            //adds 1 to checkers
	                            checkColumn += 1;
	                            checkRow += 1;

	                            if(checkColumn == 0 || checkRow == HEIGHT -1){ //if outside of board, break
	                                check = false;
	                                break;
	                            }

	                            if(counter >= 4){
	                                System.out.println("Player 1 wins"); //if counter is greater or equal to 4, player wins
	                                check = false;
	                                flag = false;
	                                break;
	                            }
	                        }
	                    }
	                    if(counter >= 4){
	                        flag = false;
	                        break;
	                    }

	                    //resets counter and checkers
	                    counter = 0;
	                    checkColumn = 1;
	                    checkRow = 1;
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckRDiagonalBack(){
	        //flag
	        boolean flag = true;

	        //counter
	        int counter = 0;

	        //check boolean
	        Boolean check = false;

	        //checkers
	        int checkColumn = 1;
	        int checkRow = 1;

	        while(flag){

	            //goes through until an R is found
	            for(int w = 0; WIDTH > w; w += 1){
	                for(int h = 0; HEIGHT > h; h += 1){
	                    if(board[w][h] == 'R'){ //if R is found, add one to counter and go into loop
	                        counter += 1;
	                        check = true;
	                        while(check){ //goes through diagonally looking for Rs
	                            if(w - checkColumn >= 0 && h - checkRow >= 0){
	                                if(board[w - checkColumn][h - checkRow] == 'R'){
	                                    counter += 1; //if R is found, add 1 to counter
	                                }
	                            }

	                            //adds 1 to checkers
	                            checkColumn += 1;
	                            checkRow += 1;

	                            if(checkColumn == 0 || checkRow == HEIGHT -1){ //if outside of board, break
	                                check = false;
	                                break;
	                            }

	                            if(counter >= 4){
	                                System.out.println("Player 2 wins"); //if counter is greater or equal to 4, player wins
	                                check = false;
	                                flag = false;
	                                break;
	                            }
	                        }
	                    }
	                    if(counter >= 4){
	                        flag = false;
	                        break;
	                    }

	                    //resets counter and checkers
	                    counter = 0;
	                    checkColumn = 1;
	                    checkRow = 1;
	                }
	            }
	            break;
	        }
	        return flag;
	    }

	    public static boolean CheckY(){
	        //creates flag
	        boolean flag = true;

	        //checks all Ys at once, for clearner main loop
	        if(!CheckYVertical() || !CheckYHorizontal()|| !CheckYDiagonalBack()|| !CheckYDiagonalForward()){
	            flag = false;
	        }
	        return flag;
	    }

	    public static boolean CheckR(){
	        //creates flag
	        boolean flag = true;

	        //checks all Rs at once, for clearner main loop
	        if(!CheckRVertical() || !CheckRHorizontal() || !CheckRDiagonalBack() || !CheckRDiagonalForward()){
	            flag = false;
	        }
	        return flag;
	    }
	}
